@using Gastronomy.Dtos.Validators
@using Gastronomy.UI.Shared.Extensions;

@if(_model is not null)
{
    <MudGrid>
        <MudItem xs="9">
            <h1>
                @Localizer["DishDetailsHeader"]
            </h1>
        </MudItem>
        <MudItem xs="3">
            <MudCheckBox T="bool" Label="@(Localizer["EnableEditingDishCheckboxCaption"])"
                         @bind-Value="@_isInEditMode" />
        </MudItem>
        <MudItem xs="12">
            <MudForm Model="@_model" FieldChanged="FormulateFieldChanged" @ref="@_form">
                <MudGrid>

                    <MudItem xs="12">
                        <MudTextField T="string" For="@(() => _model.Name)"
                                      Label="@(Localizer["UpdateDishNameLabel"])"
                                      @bind-Value="_model.Name"
                                      ReadOnly="@(!_isInEditMode)"
                                      Validation="@(new Func<string, Task<IEnumerable<string>>>(async _ =>  await Validator.ValidateSingleProperty(_model, nameof(_model.Name))))"
                                      MaxLength="ValidationConstants.MaxDishNameLength" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudNumericField T="decimal" For="@(() => _model.BasePrice)"
                                         Label="@(Localizer["UpdateDishBasePriceLabel"])"
                                         @bind-Value="_model.BasePrice" Format="0.00"
                                         ReadOnly="@(!_isInEditMode)"
                                         Min="ValidationConstants.MinDishBasePrice"
                                         Validation="@(new Func<decimal, Task<IEnumerable<string>>>(async _ =>  await Validator.ValidateSingleProperty(_model, nameof(_model.BasePrice))))" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" For="@(() => _model.Description)"
                                      Label="@(Localizer["UpdateDishDescriptionLabel"])"
                                      Lines="10"
                                      MaxLines="10"
                                      @bind-Value="_model.Description"
                                      ReadOnly="@(!_isInEditMode)"
                                      Validation="@(new Func<string, Task<IEnumerable<string>>>(async _ =>  await Validator.ValidateSingleProperty(_model, nameof(_model.Description))))"
                                      MaxLength="ValidationConstants.MaxDishDescriptionLength" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudCheckBox T="bool" For="@(() => _model.IsNewCategory)"
                                     Label="@(Localizer["UpdateDishIsNewCategoryLabel"])"
                                     @bind-Value="@CreateNewCategory"
                                     ReadOnly="@(!_isInEditMode)"/>
                    </MudItem>
                    @if (_model.IsNewCategory)
                    {
                        <MudItem xs="9">
                            <MudTextField T="string" For="@(() => _model.NewCategoryName)"
                                          Label="@(Localizer["UpdateDishNewCategoryNameLabel"])"
                                          @bind-Value="_model.NewCategoryName"
                                          ReadOnly="@(!_isInEditMode)"
                                          Validation="@(new Func<string, Task<IEnumerable<string>>>(async _ =>  await Validator.ValidateSingleProperty(_model, nameof(_model.NewCategoryName))))" />
                        </MudItem>
                    }
                    else if (Categories is not null)
                    {
                        <MudItem xs="9">
                            <MudSelect T="DishCategoryDto?" Value="@SelectedCategory"
                                       Label="@(Localizer["UpdateDishExistingCategoryLabel"])"
                                       ValueChanged="SelectedCategoryValueChanged"
                                       ReadOnly="@(!_isInEditMode)"
                                       Validation="@(new Func<DishCategoryDto?, Task<IEnumerable<string>>>(async _ =>  await Validator.ValidateSingleProperty(_model, nameof(_model.ExistingCategoryId))))">
                                @foreach (var category in Categories)
                                {
                                    <MudSelectItem T="DishCategoryDto" Value="@category">
                                        <MudText>
                                            @category.Name
                                        </MudText>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    }

                    <MudItem xs="12" Class="d-flex justify-content-end">
                        <MudButton Color="Color.Secondary"
                                   Variant="Variant.Outlined"
                                   Disabled="@(!_modified)"
                                   OnClick="RevertChanges"
                        Class="me-2">
                            @Localizer["RevertDishChangesButtonCaption"]
                        </MudButton>
                        <MudButton Color="Color.Primary"
                                   Variant="Variant.Filled"
                                   Disabled="@(!_modified || !_isInEditMode)"
                                   OnClick="@(async  () => await Save())">
                            @Localizer["SaveDishChangesButtonCaption"]
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudItem>
    </MudGrid>
}